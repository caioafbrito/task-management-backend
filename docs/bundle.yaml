openapi: 3.1.0
info:
  title: Task Management API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/v1
    description: Local development
  - url: https://api.seusite.com/api/v1
    description: Production
paths:
  /auth/register:
    post:
      summary: Let you register in the App
      description: This route creates a new user.
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '409':
          description: The App already has a user with the email provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: The email provided is already in use.
        '422':
          description: Your request does not follow the body pattern or some field does not follow some constraint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error. If it persists, contact the admin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unknown Error.
  /auth/login:
    post:
      summary: Let you login in the App
      description: This route checks the credentials and logs the user into App.
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateUserRequest'
      responses:
        '200':
          description: User successfully passed into authentication!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateUserResponse'
        '401':
          description: Invalid credentials (email and/or password).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid credentials.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: User not found.
        '422':
          description: Your request does not follow the body pattern or some field does not follow some constraint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error. If it persists, contact the admin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unknown Error.
  /auth/refresh-access-token:
    post:
      summary: Refresh access token
      description: |
        Generates a new access token using a valid refresh token provided via cookie named `refreshToken`.
      tags:
        - Auth
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
          description: Refresh token required in cookie
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  newAccessToken:
                    type: string
                    description: JWT access token for authenticated endpoints
        '400':
          description: Refresh token is missing from the cookies (refreshToken missing (cookie))
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: refreshToken missing (cookie)
        '401':
          description: |
            Refresh token is expired, invalid, malformed, or not yet active. Examples: 
              - Refresh token expired (TokenExpiredError) 
              - Invalid refresh token or malformed request (JsonWebTokenError) 
              - Refresh token is not yet active (NotBeforeError)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                TokenExpiredError:
                  value:
                    message: Refresh token expired
                JsonWebTokenError:
                  value:
                    message: Invalid refresh token or malformed request.
                NotBeforeError:
                  value:
                    message: Refresh token is not yet active
        '500':
          description: Unexpected authentication error (An unexpected authentication error occurred.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unknown Error
  /task:
    get:
      summary: Here you can get all tasks of some user
      description: After login, you can call this endpoint to get all tasks of the user.
      tags:
        - Task
      responses:
        '200':
          description: All tasks returned!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: User name (required)
        age:
          type: number
          minimum: 1
          description: User age (required)
        email:
          type: string
          maxLength: 255
          format: email
          description: User email (required)
        password:
          type: string
          description: User password (required)
        2faEnabled:
          type: boolean
          default: false
          description: If the user want 2faEnabled (optional, default=false)
      required:
        - name
        - age
        - email
        - password
    CreateUserResponse:
      type: object
      properties:
        userId:
          type: string
          description: User ID
        userName:
          type: string
          description: User name
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Human-readable error message describing the problem
        code:
          type: string
          description: Application-specific error code (optional)
        details:
          type: object
          description: Additional error details (optional, can include validation field errors)
          additionalProperties: true
      required:
        - message
    AuthenticateUserRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 255
          format: email
          description: User email (required)
        password:
          type: string
          description: User password (required)
      required:
        - email
        - password
    AuthenticateUserResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token to use when accessing endpoints
    Task:
      type: object
      properties:
        id:
          type: number
        owner:
          type: number
        title:
          type: string
        description:
          type: string
        dueDate:
          type: date
        isDone:
          type: boolean
